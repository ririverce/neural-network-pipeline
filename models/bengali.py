import torch
import torch.nn.functional as F



class BengaliVGG16(torch.nn.Module):

    def __init__(self, num_categories):
        super(BengaliVGG16, self).__init__()
        self.num_categories = num_categories
        self.block1_conv1 = torch.nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1)
        self.block1_bn1 = torch.nn.BatchNorm2d(64)
        self.block1_conv2 = torch.nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1)
        self.block1_bn2 = torch.nn.BatchNorm2d(64)
        self.block1_pool = torch.nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.block2_conv1 = torch.nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)
        self.block2_bn1 = torch.nn.BatchNorm2d(128)
        self.block2_conv2 = torch.nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1)
        self.block2_bn2 = torch.nn.BatchNorm2d(128)
        self.block2_pool = torch.nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.block3_conv1 = torch.nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1)
        self.block3_bn1 = torch.nn.BatchNorm2d(256)
        self.block3_conv2 = torch.nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1)
        self.block3_bn2 = torch.nn.BatchNorm2d(256)
        self.block3_conv3 = torch.nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1)
        self.block3_bn3 = torch.nn.BatchNorm2d(256)
        self.block3_pool = torch.nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.block4_conv1 = torch.nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1)
        self.block4_bn1 = torch.nn.BatchNorm2d(512)
        self.block4_conv2 = torch.nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.block4_bn2 = torch.nn.BatchNorm2d(512)
        self.block4_conv3 = torch.nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.block4_bn3 = torch.nn.BatchNorm2d(512)
        self.block4_pool = torch.nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.block5_a_conv1 = torch.nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.block5_a_bn1 = torch.nn.BatchNorm2d(512)
        self.block5_a_conv2 = torch.nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.block5_a_bn2 = torch.nn.BatchNorm2d(512)
        self.block5_a_conv3 = torch.nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.block5_a_bn3 = torch.nn.BatchNorm2d(512)
        self.block5_a_pool = torch.nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.classifier_a_linear1 = torch.nn.Linear(512*4*4, 4096)
        self.classifier_a_bn1 = torch.nn.BatchNorm1d(4096)
        self.classifier_a_linear2 = torch.nn.Linear(4096, 4096)
        self.classifier_a_bn2 = torch.nn.BatchNorm1d(4096)
        self.classifier_a_linear3 = torch.nn.Linear(4096, num_categories[0])
        self.block5_b_conv1 = torch.nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.block5_b_bn1 = torch.nn.BatchNorm2d(512)
        self.block5_b_conv2 = torch.nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.block5_b_bn2 = torch.nn.BatchNorm2d(512)
        self.block5_b_conv3 = torch.nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.block5_b_bn3 = torch.nn.BatchNorm2d(512)
        self.block5_b_pool = torch.nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.classifier_b_linear1 = torch.nn.Linear(512*4*4, 4096)
        self.classifier_b_bn1 = torch.nn.BatchNorm1d(4096)
        self.classifier_b_linear2 = torch.nn.Linear(4096, 4096)
        self.classifier_b_bn2 = torch.nn.BatchNorm1d(4096)
        self.classifier_b_linear3 = torch.nn.Linear(4096, num_categories[1])
        self.block5_c_conv1 = torch.nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.block5_c_bn1 = torch.nn.BatchNorm2d(512)
        self.block5_c_conv2 = torch.nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.block5_c_bn2 = torch.nn.BatchNorm2d(512)
        self.block5_c_conv3 = torch.nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1)
        self.block5_c_bn3 = torch.nn.BatchNorm2d(512)
        self.block5_c_pool = torch.nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.classifier_c_linear1 = torch.nn.Linear(512*4*4, 4096)
        self.classifier_c_bn1 = torch.nn.BatchNorm1d(4096)
        self.classifier_c_linear2 = torch.nn.Linear(4096, 4096)
        self.classifier_c_bn2 = torch.nn.BatchNorm1d(4096)
        self.classifier_c_linear3 = torch.nn.Linear(4096, num_categories[2])

    def forward(self, x):
        h = x
        h = F.relu(self.block1_bn1(self.block1_conv1(h)))
        h = F.relu(self.block1_bn2(self.block1_conv2(h)))
        h = self.block1_pool(h)
        h = F.relu(self.block2_bn1(self.block2_conv1(h)))
        h = F.relu(self.block2_bn2(self.block2_conv2(h)))
        h = self.block2_pool(h)
        h = F.relu(self.block3_bn1(self.block3_conv1(h)))
        h = F.relu(self.block3_bn2(self.block3_conv2(h)))
        h = F.relu(self.block3_bn3(self.block3_conv3(h)))
        h = self.block3_pool(h)
        h = F.relu(self.block4_bn1(self.block4_conv1(h)))
        h = F.relu(self.block4_bn2(self.block4_conv2(h)))
        h = F.relu(self.block4_bn3(self.block4_conv3(h)))
        h = self.block4_pool(h)
        h_a = h
        h_a = F.relu(self.block5_a_bn1(self.block5_a_conv1(h_a)))
        h_a = F.relu(self.block5_a_bn2(self.block5_a_conv2(h_a)))
        h_a = F.relu(self.block5_a_bn3(self.block5_a_conv3(h_a)))
        h_a = self.block5_a_pool(h_a)
        h_a = h_a.view(h_a.size(0), -1)
        h_a = F.relu(self.classifier_a_bn1(self.classifier_a_linear1(h_a)))
        h_a = F.relu(self.classifier_a_bn2(self.classifier_a_linear2(h_a)))
        h_a = self.classifier_a_linear3(h_a)
        h_a = F.softmax(h_a, dim=-1)
        h_b = h
        h_b = F.relu(self.block5_b_bn1(self.block5_b_conv1(h_b)))
        h_b = F.relu(self.block5_b_bn2(self.block5_b_conv2(h_b)))
        h_b = F.relu(self.block5_b_bn3(self.block5_b_conv3(h_b)))
        h_b = self.block5_b_pool(h_b)
        h_b = h_b.view(h_b.size(0), -1)
        h_b = F.relu(self.classifier_b_bn1(self.classifier_b_linear1(h_b)))
        h_b = F.relu(self.classifier_b_bn2(self.classifier_b_linear2(h_b)))
        h_b = self.classifier_b_linear3(h_b)
        h_b = F.softmax(h_b, dim=-1)
        h_c = h
        h_c = F.relu(self.block5_c_bn1(self.block5_c_conv1(h_c)))
        h_c = F.relu(self.block5_c_bn2(self.block5_c_conv2(h_c)))
        h_c = F.relu(self.block5_c_bn3(self.block5_c_conv3(h_c)))
        h_c = self.block5_c_pool(h_c)
        h_c = h_c.view(h_c.size(0), -1)
        h_c = F.relu(self.classifier_c_bn1(self.classifier_c_linear1(h_c)))
        h_c = F.relu(self.classifier_c_bn2(self.classifier_c_linear2(h_c)))
        h_c = self.classifier_c_linear3(h_c)
        h_c = F.softmax(h_c, dim=-1)
        y = [h_a, h_b, h_c]
        return y